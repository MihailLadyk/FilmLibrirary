{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Misha\\\\Desktop\\\\goit-react-hw-04-movies\\\\src\\\\pages\\\\MoviesPage.js\";\n// import PropTypes from \"prop-types\";\n// import { React, Component } from \"react\";\n// import queryString from \"query-string\";\n// import Searchbar from \"../Components/Searchbar\";\n// import { fetchMoviesByQuery } from \"../services/movieApi\";\n// import { Box } from \"@chakra-ui/react\";\n// import { Link } from \"react-router-dom\";\n// import { ReactPaginate } from \"react-paginate\";\n// import $ from \"jquery\";\n// export class CommentList extends Component {\n//   static propTypes = {\n//     data: PropTypes.array.isRequired,\n//   };\n//   render() {\n//     let commentNodes = this.props.data.map(function (comment, index) {\n//       return <div key={index}>{comment.comment}</div>;\n//     });\n//     return (\n//       <div id=\"project-comments\" className=\"commentList\">\n//         <ul>{commentNodes}</ul>\n//       </div>\n//     );\n//   }\n// }\n// export default class MoviesPage extends Component {\n//   state = {\n//     movies: [],\n//     error: null,\n//     loading: false,\n//     data: [],\n//     offset: 0,\n//   };\n//   loadCommentsFromServer() {\n//     $.ajax({\n//       url: this.props.url,\n//       data: { limit: this.props.perPage, offset: this.state.offset },\n//       dataType: \"json\",\n//       type: \"GET\",\n//       success: (data) => {\n//         this.setState({\n//           data: data.comments,\n//           pageCount: Math.ceil(data.meta.total_count / data.meta.limit),\n//         });\n//       },\n//       error: (xhr, status, err) => {\n//         console.error(this.props.url, status, err.toString()); // eslint-disable-line\n//       },\n//     });\n//   }\n//   componentDidMount() {\n//     this.loadCommentsFromServer();\n//     const { querry } = queryString.parse(this.props.location.search);\n//     if (querry) {\n//       this.setState({ loading: true });\n//       fetchMoviesByQuery(querry)\n//         .then((res) => this.setState({ movies: res.data.results }))\n//         .catch((error) => this.setState({ error }))\n//         .finally(() => this.setState({ loading: false }));\n//     }\n//   }\n//   componentDidUpdate(prevProps) {\n//     const prevSearch = prevProps.location.search;\n//     const newSearch = this.props.location.search;\n//     if (prevSearch !== newSearch) {\n//       const { querry } = queryString.parse(newSearch);\n//       console.log(querry);\n//       this.setState({ loading: true });\n//       fetchMoviesByQuery(querry)\n//         .then((res) => this.setState({ movies: res.data.results }))\n//         .catch((error) => this.setState({ error }))\n//         .finally(() => this.setState({ loading: false }));\n//     }\n//   }\n//   handleSearch = (querry) => {\n//     this.props.history.push({\n//       ...this.props.location,\n//       search: `?querry=${querry}`,\n//     });\n//   };\n//   handlePageClick = (data) => {\n//     let selected = data.selected;\n//     let offset = Math.ceil(selected * this.props.perPage);\n//     this.setState({ offset: offset }, () => {\n//       this.loadCommentsFromServer();\n//     });\n//   };\n//   render() {\n//     const { movies, loading, error } = this.state;\n//     return (\n//       <div>\n//         <div>\n//           <Searchbar onSearch={this.handleSearch} />\n//           {loading && <h2>Loading...</h2>}\n//           {error && <h2>Error, {error.message}</h2>}\n//           {movies.length > 0 && (\n//             <ul>\n//               {movies.map((movie) => (\n//                 <li key={movie.id}>\n//                   <Link to={`/movies/${movie.id}`}>{movie.title}</Link>\n//                 </li>\n//               ))}\n//             </ul>\n//           )}\n//           <ReactPaginate\n//             previousLabel={\"previous\"}\n//             nextLabel={\"next\"}\n//             breakLabel={\"...\"}\n//             breakClassName={\"break-me\"}\n//             pageCount={this.state.pageCount}\n//             marginPagesDisplayed={2}\n//             pageRangeDisplayed={5}\n//             onPageChange={this.handlePageClick}\n//             containerClassName={\"pagination\"}\n//             activeClassName={\"active\"}\n//           />\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n// MoviesPage.propTypes = {\n//   history: PropTypes.object,\n//   location: PropTypes.object,\n// };\nimport PropTypes from 'prop-types';\nimport { Component } from \"react\";\nimport queryString from \"query-string\";\nimport Searchbar from \"../Components/Searchbar\";\nimport { fetchMoviesByQuery } from \"../services/movieApi\";\nimport { Box } from \"@chakra-ui/react\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MoviesPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      error: null,\n      loading: false\n    };\n\n    this.handleSearch = querry => {\n      this.props.history.push({ ...this.props.location,\n        search: `?querry=${querry}`\n      });\n    };\n  }\n\n  componentDidMount() {\n    const {\n      querry\n    } = queryString.parse(this.props.location.search);\n\n    if (querry) {\n      this.setState({\n        loading: true\n      });\n      fetchMoviesByQuery(querry).then(res => this.setState({\n        movies: res.data.results\n      })).catch(error => this.setState({\n        error\n      })).finally(() => this.setState({\n        loading: false\n      }));\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevSearch = prevProps.location.search;\n    const newSearch = this.props.location.search;\n\n    if (prevSearch !== newSearch) {\n      const {\n        querry\n      } = queryString.parse(newSearch);\n      console.log(querry);\n      this.setState({\n        loading: true\n      });\n      fetchMoviesByQuery(querry).then(res => this.setState({\n        movies: res.data.results\n      })).catch(error => this.setState({\n        error\n      })).finally(() => this.setState({\n        loading: false\n      }));\n    }\n  }\n\n  render() {\n    const {\n      movies,\n      loading,\n      error\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Box, {\n      bgColor: \"\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Searchbar, {\n          onSearch: this.handleSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 9\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this), error && /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Error, \", error.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 19\n        }, this), movies.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: `/movies/${movie.id}`,\n              children: movie.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 17\n            }, this)\n          }, movie.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nMoviesPage.propTypes = {\n  history: PropTypes.object,\n  location: PropTypes.object\n};","map":{"version":3,"sources":["C:/Users/Misha/Desktop/goit-react-hw-04-movies/src/pages/MoviesPage.js"],"names":["PropTypes","Component","queryString","Searchbar","fetchMoviesByQuery","Box","Link","MoviesPage","state","movies","error","loading","handleSearch","querry","props","history","push","location","search","componentDidMount","parse","setState","then","res","data","results","catch","finally","componentDidUpdate","prevProps","prevSearch","newSearch","console","log","render","message","length","map","movie","id","title","propTypes","object"],"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","sourcesContent":["// import PropTypes from \"prop-types\";\r\n// import { React, Component } from \"react\";\r\n// import queryString from \"query-string\";\r\n// import Searchbar from \"../Components/Searchbar\";\r\n// import { fetchMoviesByQuery } from \"../services/movieApi\";\r\n// import { Box } from \"@chakra-ui/react\";\r\n// import { Link } from \"react-router-dom\";\r\n// import { ReactPaginate } from \"react-paginate\";\r\n// import $ from \"jquery\";\r\n\r\n// export class CommentList extends Component {\r\n//   static propTypes = {\r\n//     data: PropTypes.array.isRequired,\r\n//   };\r\n\r\n//   render() {\r\n//     let commentNodes = this.props.data.map(function (comment, index) {\r\n//       return <div key={index}>{comment.comment}</div>;\r\n//     });\r\n\r\n//     return (\r\n//       <div id=\"project-comments\" className=\"commentList\">\r\n//         <ul>{commentNodes}</ul>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default class MoviesPage extends Component {\r\n//   state = {\r\n//     movies: [],\r\n//     error: null,\r\n//     loading: false,\r\n//     data: [],\r\n//     offset: 0,\r\n//   };\r\n\r\n//   loadCommentsFromServer() {\r\n//     $.ajax({\r\n//       url: this.props.url,\r\n//       data: { limit: this.props.perPage, offset: this.state.offset },\r\n//       dataType: \"json\",\r\n//       type: \"GET\",\r\n\r\n//       success: (data) => {\r\n//         this.setState({\r\n//           data: data.comments,\r\n//           pageCount: Math.ceil(data.meta.total_count / data.meta.limit),\r\n//         });\r\n//       },\r\n\r\n//       error: (xhr, status, err) => {\r\n//         console.error(this.props.url, status, err.toString()); // eslint-disable-line\r\n//       },\r\n//     });\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     this.loadCommentsFromServer();\r\n//     const { querry } = queryString.parse(this.props.location.search);\r\n\r\n//     if (querry) {\r\n//       this.setState({ loading: true });\r\n//       fetchMoviesByQuery(querry)\r\n//         .then((res) => this.setState({ movies: res.data.results }))\r\n//         .catch((error) => this.setState({ error }))\r\n//         .finally(() => this.setState({ loading: false }));\r\n//     }\r\n//   }\r\n\r\n//   componentDidUpdate(prevProps) {\r\n//     const prevSearch = prevProps.location.search;\r\n//     const newSearch = this.props.location.search;\r\n\r\n//     if (prevSearch !== newSearch) {\r\n//       const { querry } = queryString.parse(newSearch);\r\n//       console.log(querry);\r\n//       this.setState({ loading: true });\r\n//       fetchMoviesByQuery(querry)\r\n//         .then((res) => this.setState({ movies: res.data.results }))\r\n//         .catch((error) => this.setState({ error }))\r\n//         .finally(() => this.setState({ loading: false }));\r\n//     }\r\n//   }\r\n\r\n//   handleSearch = (querry) => {\r\n//     this.props.history.push({\r\n//       ...this.props.location,\r\n//       search: `?querry=${querry}`,\r\n//     });\r\n//   };\r\n\r\n//   handlePageClick = (data) => {\r\n//     let selected = data.selected;\r\n//     let offset = Math.ceil(selected * this.props.perPage);\r\n\r\n//     this.setState({ offset: offset }, () => {\r\n//       this.loadCommentsFromServer();\r\n//     });\r\n//   };\r\n//   render() {\r\n//     const { movies, loading, error } = this.state;\r\n//     return (\r\n//       <div>\r\n//         <div>\r\n//           <Searchbar onSearch={this.handleSearch} />\r\n//           {loading && <h2>Loading...</h2>}\r\n//           {error && <h2>Error, {error.message}</h2>}\r\n//           {movies.length > 0 && (\r\n//             <ul>\r\n//               {movies.map((movie) => (\r\n//                 <li key={movie.id}>\r\n//                   <Link to={`/movies/${movie.id}`}>{movie.title}</Link>\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           )}\r\n//           <ReactPaginate\r\n//             previousLabel={\"previous\"}\r\n//             nextLabel={\"next\"}\r\n//             breakLabel={\"...\"}\r\n//             breakClassName={\"break-me\"}\r\n//             pageCount={this.state.pageCount}\r\n//             marginPagesDisplayed={2}\r\n//             pageRangeDisplayed={5}\r\n//             onPageChange={this.handlePageClick}\r\n//             containerClassName={\"pagination\"}\r\n//             activeClassName={\"active\"}\r\n//           />\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// MoviesPage.propTypes = {\r\n//   history: PropTypes.object,\r\n//   location: PropTypes.object,\r\n// };\r\n\r\n\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { Component } from \"react\";\r\nimport queryString from \"query-string\";\r\nimport Searchbar from \"../Components/Searchbar\";\r\nimport { fetchMoviesByQuery } from \"../services/movieApi\";\r\nimport { Box } from \"@chakra-ui/react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class MoviesPage extends Component {\r\n  state = {\r\n    movies: [],\r\n    error: null,\r\n    loading: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { querry } = queryString.parse(this.props.location.search);\r\n    if (querry) {\r\n      this.setState({ loading: true });\r\n      fetchMoviesByQuery(querry)\r\n        .then((res) => this.setState({ movies: res.data.results }))\r\n        .catch((error) => this.setState({ error }))\r\n        .finally(() => this.setState({ loading: false }));\r\n\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const prevSearch = prevProps.location.search;\r\n    const newSearch = this.props.location.search;\r\n\r\n    if (prevSearch !== newSearch) {\r\n      const { querry } = queryString.parse(newSearch);\r\n      console.log(querry);\r\n      this.setState({ loading: true });\r\n      fetchMoviesByQuery(querry)\r\n        .then((res) => this.setState({ movies: res.data.results }))\r\n        .catch((error) => this.setState({ error }))\r\n        .finally(() => this.setState({ loading: false }));\r\n    }\r\n  }\r\n\r\n  handleSearch = (querry) => {\r\n    this.props.history.push({\r\n      ...this.props.location,\r\n      search: `?querry=${querry}`,\r\n    });\r\n  };\r\n  render() {\r\n    const { movies, loading, error } = this.state;\r\n    return (\r\n      <Box bgColor=''>\r\n      <div>\r\n        <Searchbar onSearch={this.handleSearch}  />\r\n        {loading && <h2>Loading...</h2>}\r\n        {error && <h2>Error, {error.message}</h2>}\r\n        {movies.length > 0 && (\r\n          <ul>\r\n            {movies.map((movie) => (\r\n              <li key={movie.id}>\r\n                <Link to={`/movies/${movie.id}`}>{movie.title}</Link>\r\n              </li>\r\n            ))}\r\n            \r\n          </ul>\r\n        )}\r\n      </div>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nMoviesPage.propTypes = {\r\nhistory: PropTypes.object,\r\nlocation: PropTypes.object\r\n}"]},"metadata":{},"sourceType":"module"}